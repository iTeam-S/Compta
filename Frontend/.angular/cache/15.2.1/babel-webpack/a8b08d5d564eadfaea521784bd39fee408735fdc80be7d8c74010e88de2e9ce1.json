{"ast":null,"code":"import { BehaviorSubject, tap } from 'rxjs';\nimport { environment } from 'src/environments/environment.development';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"@angular/router\";\nexport class AuthService {\n  constructor(http, router) {\n    this.http = http;\n    this.router = router;\n    this._loading$ = new BehaviorSubject(false);\n  }\n  get loading$() {\n    return this._loading$.asObservable();\n  }\n  setLoadingStatus(loading) {\n    this._loading$.next(loading);\n  }\n  onRegister(name, email, password, role) {\n    return this.http.post(`${environment.apiUrl}/user`, {\n      name,\n      email,\n      password,\n      role\n    }).pipe(tap(el => this.setLoadingStatus(true))).subscribe(res => {\n      sessionStorage.setItem('token', res.token);\n      this.router.navigateByUrl('/home');\n    });\n  }\n  onLogin(email, password) {\n    this.setLoadingStatus(true);\n    return this.http.post(`${environment.apiUrl}/user/login`, {\n      email,\n      password\n    }).subscribe(res => {\n      sessionStorage.setItem('token', res.token);\n      this.router.navigateByUrl('/home');\n    });\n  }\n  getToken() {\n    return sessionStorage.getItem('token');\n  }\n}\nAuthService.ɵfac = function AuthService_Factory(t) {\n  return new (t || AuthService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.Router));\n};\nAuthService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: AuthService,\n  factory: AuthService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"mappings":"AAEA,SAASA,eAAe,EAAcC,GAAG,QAAQ,MAAM;AACvD,SAASC,WAAW,QAAQ,0CAA0C;;;;AAQtE,OAAM,MAAOC,WAAW;EAEtBC,YAAoBC,IAAgB,EAChBC,MAAc;IADd,SAAI,GAAJD,IAAI;IACJ,WAAM,GAANC,MAAM;IAGlB,cAAS,GAAG,IAAIN,eAAe,CAAU,KAAK,CAAC;EAFnD;EAIJ,IAAIO,QAAQ;IACV,OAAO,IAAI,CAACC,SAAS,CAACC,YAAY,EAAE;EACtC;EAEQC,gBAAgB,CAACC,OAAe;IACtC,IAAI,CAACH,SAAS,CAACI,IAAI,CAACD,OAAO,CAAC;EAC9B;EAEAE,UAAU,CAACC,IAAY,EAAEC,KAAa,EAAEC,QAAgB,EAAEC,IAAY;IACpE,OAAO,IAAI,CAACZ,IAAI,CAACa,IAAI,CAAQ,GAAGhB,WAAW,CAACiB,MAAM,OAAO,EAAC;MAACL,IAAI;MAAEC,KAAK;MAAEC,QAAQ;MAAEC;IAAI,CAAC,CAAC,CAACG,IAAI,CAC3FnB,GAAG,CAACoB,EAAE,IAAI,IAAI,CAACX,gBAAgB,CAAC,IAAI,CAAC,CAAC,CACvC,CAACY,SAAS,CACRC,GAAQ,IAAI;MACXC,cAAc,CAACC,OAAO,CAAC,OAAO,EAAEF,GAAG,CAACG,KAAK,CAAC;MAC1C,IAAI,CAACpB,MAAM,CAACqB,aAAa,CAAC,OAAO,CAAC;IACpC,CAAC,CACF;EACH;EACAC,OAAO,CAACb,KAAa,EAAEC,QAAgB;IACrC,IAAI,CAACN,gBAAgB,CAAC,IAAI,CAAC;IAC3B,OAAO,IAAI,CAACL,IAAI,CAACa,IAAI,CAAO,GAAGhB,WAAW,CAACiB,MAAM,aAAa,EAAC;MAACJ,KAAK;MAAEC;IAAQ,CAAC,CAAC,CAACM,SAAS,CACxFC,GAAQ,IAAI;MACXC,cAAc,CAACC,OAAO,CAAC,OAAO,EAAEF,GAAG,CAACG,KAAK,CAAC;MAC1C,IAAI,CAACpB,MAAM,CAACqB,aAAa,CAAC,OAAO,CAAC;IACpC,CAAC,CACF;EACH;EACAE,QAAQ;IACN,OAAOL,cAAc,CAACM,OAAO,CAAC,OAAO,CAAE;EACzC;;AArCW3B,WAAW;mBAAXA,WAAW;AAAA;AAAXA,WAAW;SAAXA,WAAW;EAAA4B,SAAX5B,WAAW;EAAA6B,YAFV;AAAM","names":["BehaviorSubject","tap","environment","AuthService","constructor","http","router","loading$","_loading$","asObservable","setLoadingStatus","loading","next","onRegister","name","email","password","role","post","apiUrl","pipe","el","subscribe","res","sessionStorage","setItem","token","navigateByUrl","onLogin","getToken","getItem","factory","providedIn"],"sourceRoot":"","sources":["D:\\iTeam-$\\compta-app\\src\\app\\auth\\services\\auth.service.ts"],"sourcesContent":["import { HttpClient } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { BehaviorSubject, Observable, tap } from 'rxjs';\nimport { environment } from 'src/environments/environment.development';\nimport { User } from '../models/login-form-value.model';\nimport { Users } from '../models/register-form-value.model';\nimport { Router } from '@angular/router';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class AuthService {\n\n  constructor(private http: HttpClient,\n              private router: Router\n  ) { }\n\n  private _loading$ = new BehaviorSubject<boolean>(false);\n\n  get loading$():Observable<boolean>{\n    return this._loading$.asObservable();\n  }\n\n  private setLoadingStatus(loading:boolean){\n    this._loading$.next(loading)\n  }\n\n  onRegister(name: string, email: string, password: string, role: string) {\n    return this.http.post<Users>(`${environment.apiUrl}/user`,{name, email, password, role}).pipe(\n      tap(el => this.setLoadingStatus(true))\n    ).subscribe(\n      (res: any) => {\n        sessionStorage.setItem('token', res.token)\n        this.router.navigateByUrl('/home')\n      }\n    )\n  }\n  onLogin(email: string, password: string) {\n    this.setLoadingStatus(true);\n    return this.http.post<User>(`${environment.apiUrl}/user/login`,{email, password}).subscribe(\n      (res: any) => {\n        sessionStorage.setItem('token', res.token)\n        this.router.navigateByUrl('/home')\n      }\n    )\n  }\n  getToken():string{\n    return sessionStorage.getItem('token')!\n  }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}