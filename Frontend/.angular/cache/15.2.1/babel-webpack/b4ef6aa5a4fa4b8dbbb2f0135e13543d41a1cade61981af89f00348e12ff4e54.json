{"ast":null,"code":"import { environment } from 'src/environments/environment.development';\nimport { BehaviorSubject, delay } from 'rxjs';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class MainService {\n  constructor(http) {\n    this.http = http;\n    this._loading$ = new BehaviorSubject(false);\n    this._users$ = new BehaviorSubject([]);\n  }\n  get loading$() {\n    return this._loading$.asObservable();\n  }\n  get candidates$() {\n    return this._users$.asObservable();\n  }\n  setLoadingStatus(loading) {\n    this._loading$.next(loading);\n  }\n  getUser() {\n    this.setLoadingStatus(true);\n    return this.http.get(`${environment.apiUrl}/user?search=Kevin`).pipe(delay(1000), tap(users => {\n      this._users$.next(users);\n      this.setLoadingStatus(false);\n    }));\n  }\n}\nMainService.ɵfac = function MainService_Factory(t) {\n  return new (t || MainService)(i0.ɵɵinject(i1.HttpClient));\n};\nMainService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: MainService,\n  factory: MainService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"mappings":"AAGA,SAASA,WAAW,QAAQ,0CAA0C;AACtE,SAASC,eAAe,EAAcC,KAAK,QAAQ,MAAM;;;AAKzD,OAAM,MAAOC,WAAW;EAEtBC,YAAoBC,IAAgB;IAAhB,SAAI,GAAJA,IAAI;IAChB,cAAS,GAAG,IAAIJ,eAAe,CAAU,KAAK,CAAC;IAM/C,YAAO,GAAG,IAAIA,eAAe,CAAc,EAAE,CAAC;EAPd;EAGxC,IAAIK,QAAQ;IACV,OAAO,IAAI,CAACC,SAAS,CAACC,YAAY,EAAE;EACtC;EAGA,IAAIC,WAAW;IACb,OAAO,IAAI,CAACC,OAAO,CAACF,YAAY,EAAE;EACpC;EAEQG,gBAAgB,CAACC,OAAe;IACtC,IAAI,CAACL,SAAS,CAACM,IAAI,CAACD,OAAO,CAAC;EAC9B;EAEAE,OAAO;IACL,IAAI,CAACH,gBAAgB,CAAC,IAAI,CAAC;IAC3B,OAAO,IAAI,CAACN,IAAI,CAACU,GAAG,CAAc,GAAGf,WAAW,CAACgB,MAAM,oBAAoB,CAAC,CAACC,IAAI,CAC/Ef,KAAK,CAAC,IAAI,CAAC,EACXgB,GAAG,CAACC,KAAK,IAAG;MACV,IAAI,CAACT,OAAO,CAACG,IAAI,CAACM,KAAK,CAAC;MACxB,IAAI,CAACR,gBAAgB,CAAC,KAAK,CAAC;IAC9B,CAAC,CAAC,CACH;EACH;;AA3BWR,WAAW;mBAAXA,WAAW;AAAA;AAAXA,WAAW;SAAXA,WAAW;EAAAiB,SAAXjB,WAAW;EAAAkB,YAFV;AAAM","names":["environment","BehaviorSubject","delay","MainService","constructor","http","loading$","_loading$","asObservable","candidates$","_users$","setLoadingStatus","loading","next","getUser","get","apiUrl","pipe","tap","users","factory","providedIn"],"sourceRoot":"","sources":["D:\\iTeam-$\\compta-app\\src\\app\\main\\services\\main.service.ts"],"sourcesContent":["import { HttpClient } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { UserModel } from '../models/user.model';\nimport { environment } from 'src/environments/environment.development';\nimport { BehaviorSubject, Observable, delay } from 'rxjs';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class MainService {\n\n  constructor(private http: HttpClient) { }\n  private _loading$ = new BehaviorSubject<boolean>(false);\n\n  get loading$():Observable<boolean>{\n    return this._loading$.asObservable();\n  }\n\n  private _users$ = new BehaviorSubject<UserModel[]>([]);\n  get candidates$(): Observable<UserModel[]> {\n    return this._users$.asObservable();\n  }\n\n  private setLoadingStatus(loading:boolean){\n    this._loading$.next(loading)\n  }\n\n  getUser(){\n    this.setLoadingStatus(true);\n    return this.http.get<UserModel[]>(`${environment.apiUrl}/user?search=Kevin`).pipe(\n      delay(1000),\n      tap(users => {\n        this._users$.next(users);\n        this.setLoadingStatus(false)\n      })\n    )\n  }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}