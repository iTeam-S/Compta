{"ast":null,"code":"import { HttpHeaders } from '@angular/common/http';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"src/app/auth/services/auth.service\";\nexport class AuthInterceptor {\n  constructor(authService) {\n    this.authService = authService;\n  }\n  intercept(request, next) {\n    const headers = new HttpHeaders().append('Authorization', `Bearer (setTokenHere)`);\n    const modifiedRequest = request.clone({\n      headers\n    });\n    return next.handle(modifiedRequest);\n  }\n}\nAuthInterceptor.ɵfac = function AuthInterceptor_Factory(t) {\n  return new (t || AuthInterceptor)(i0.ɵɵinject(i1.AuthService));\n};\nAuthInterceptor.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: AuthInterceptor,\n  factory: AuthInterceptor.ɵfac\n});","map":{"version":3,"mappings":"AACA,SAGEA,WAAW,QAGN,sBAAsB;;;AAK7B,OAAM,MAAOC,eAAe;EAE1BC,YAAoBC,WAAwB;IAAxB,gBAAW,GAAXA,WAAW;EAAgB;EAE/CC,SAAS,CAACC,OAA6B,EAAEC,IAAiB;IACxD,MAAMC,OAAO,GAAI,IAAIP,WAAW,EAAE,CACjCQ,MAAM,CAAC,eAAe,EAAC,uBAAuB,CAAC;IAChD,MAAMC,eAAe,GAAGJ,OAAO,CAACK,KAAK,CAAC;MAACH;IAAO,CAAC,CAAC;IAChD,OAAOD,IAAI,CAACK,MAAM,CAACF,eAAe,CAAC;EACrC;;AATWR,eAAe;mBAAfA,eAAe;AAAA;AAAfA,eAAe;SAAfA,eAAe;EAAAW,SAAfX,eAAe;AAAA","names":["HttpHeaders","AuthInterceptor","constructor","authService","intercept","request","next","headers","append","modifiedRequest","clone","handle","factory"],"sourceRoot":"","sources":["D:\\iTeam-$\\compta-app\\src\\app\\core\\interceptor\\auth.interceptor.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport {\n  HttpRequest,\n  HttpHandler,\n  HttpHeaders,\n  HttpEvent,\n  HttpInterceptor\n} from '@angular/common/http';\nimport { Observable } from 'rxjs';\nimport { AuthService } from 'src/app/auth/services/auth.service';\n\n@Injectable()\nexport class AuthInterceptor implements HttpInterceptor {\n\n  constructor(private authService: AuthService) {}\n\n  intercept(request: HttpRequest<unknown>, next: HttpHandler): Observable<HttpEvent<unknown>> {\n    const headers =  new HttpHeaders()\n    .append('Authorization',`Bearer (setTokenHere)`)\n    const modifiedRequest = request.clone({headers})\n    return next.handle(modifiedRequest)\n  }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}